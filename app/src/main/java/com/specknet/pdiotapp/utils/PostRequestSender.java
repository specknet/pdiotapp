package com.specknet.pdiotapp.utils;
import java.io.IOException;
import java.util.ArrayList;
import com.google.gson.Gson;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class PostRequestSender {

    String[][] data_for_json;

    public PostRequestSender(ArrayList<RESpeckSensorData> respeck_sensor_list) throws IOException {
        // constructor takes an arraylist of RESpeckSensorData, converts each one to a list of strings, then adds them to the list of lists
        ArrayList<String[]> data_array = new ArrayList<>();

        for (RESpeckSensorData data_point : respeck_sensor_list) {
            data_array.add(respeckDataToList(data_point));
        }

        this.data_for_json = data_array.toArray(new String[0][]);
    }


    //converts a RESpeckSensorData object to a list of strings
    private static String[] respeckDataToList(RESpeckSensorData data) {

        String accel_x = Float.toString(data.getAcc().getX());
        String accel_y = Float.toString(data.getAcc().getY());
        String accel_z = Float.toString(data.getAcc().getZ());

        String gyro_x = Float.toString(data.getGyro().getX());
        String gyro_y = Float.toString(data.getGyro().getY());
        String gyro_z = Float.toString(data.getGyro().getZ());

        return new String[]{accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z};

    }

    private static String lists_to_json(String[][] list_of_lists) {
        Gson gson = new Gson();
        return gson.toJson(list_of_lists);
    }


    //makes the html post request
    public String makeRequest() throws IOException {
        String json_payload = lists_to_json(data_for_json);

        //THIS IS FOR TESTING
        //String json_payload = "[[\"-0.6437988\", \"-0.014953613\", \"-0.77716064\", \"-0.140625\", \"0.578125\", \"0.265625\"], [\"-0.6464844\", \"-0.0071411133\", \"-0.7774048\", \"-0.609375\", \"-0.453125\", \"0.515625\"], [\"-0.638916\", \"-0.014465332\", \"-0.78082275\", \"-1.609375\", \"0.171875\", \"0.53125\"], [\"-0.63134766\", \"-0.026428223\", \"-0.7605591\", \"-0.265625\", \"0.453125\", \"0.1875\"], [\"-0.6166992\", \"-0.0154418945\", \"-0.7546997\", \"0.21875\", \"0.515625\", \"-0.046875\"], [\"-0.6113281\", \"-0.014953613\", \"-0.7197876\", \"0.015625\", \"1.125\", \"0.765625\"], [\"-0.6755371\", \"-0.026916504\", \"-0.82696533\", \"-1.765625\", \"-1.5625\", \"0.734375\"], [\"-0.66625977\", \"-0.026672363\", \"-0.8245239\", \"0.4375\", \"1.515625\", \"-0.1875\"], [\"-0.61865234\", \"-0.011779785\", \"-0.7542114\", \"0.34375\", \"1.015625\", \"0.0\"], [\"-0.59936523\", \"-0.015197754\", \"-0.74053955\", \"0.28125\", \"0.765625\", \"0.109375\"], [\"-0.61987305\", \"-0.019104004\", \"-0.75128174\", \"-0.796875\", \"1.03125\", \"0.40625\"], [\"-0.6345215\", \"-0.016662598\", \"-0.7649536\", \"-0.59375\", \"1.09375\", \"0.5\"], [\"-0.6333008\", \"-0.023742676\", \"-0.7564087\", \"0.078125\", \"0.96875\", \"0.265625\"], [\"-0.6286621\", \"-0.026428223\", \"-0.7625122\", \"0.671875\", \"0.484375\", \"0.1875\"], [\"-0.6352539\", \"-0.023742676\", \"-0.7827759\", \"1.59375\", \"0.15625\", \"-0.109375\"], [\"-0.63012695\", \"-0.010314941\", \"-0.7859497\", \"1.28125\", \"-0.953125\", \"0.015625\"], [\"-0.61572266\", \"-0.0134887695\", \"-0.77008057\", \"0.734375\", \"-0.4375\", \"-0.140625\"], [\"-0.62646484\", \"-0.016906738\", \"-0.788147\", \"-0.984375\", \"-0.515625\", \"0.203125\"], [\"-0.6347656\", \"-0.014221191\", \"-0.79229736\", \"-1.796875\", \"-0.734375\", \"0.234375\"], [\"-0.6254883\", \"-0.022521973\", \"-0.7732544\", \"-1.3125\", \"0.328125\", \"-0.140625\"], [\"-0.6230469\", \"-0.024963379\", \"-0.78326416\", \"-0.8125\", \"-0.71875\", \"-0.3125\"], [\"-0.6218262\", \"-0.019836426\", \"-0.7942505\", \"-1.078125\", \"0.078125\", \"0.0\"], [\"-0.61450195\", \"-0.028381348\", \"-0.77008057\", \"-0.328125\", \"0.828125\", \"-0.09375\"], [\"-0.61376953\", \"-0.02130127\", \"-0.784729\", \"-0.28125\", \"1.609375\", \"-0.34375\"], [\"-0.6242676\", \"-0.023742676\", \"-0.79107666\", \"-0.03125\", \"1.171875\", \"-0.078125\"], [\"-0.6281738\", \"-0.01763916\", \"-0.7842407\", \"-0.28125\", \"1.96875\", \"-0.4375\"], [\"-0.6171875\", \"-0.022277832\", \"-0.7810669\", \"-0.3125\", \"2.265625\", \"-0.203125\"], [\"-0.6159668\", \"-0.018127441\", \"-0.7593384\", \"-0.421875\", \"1.453125\", \"-0.15625\"], [\"-0.6164551\", \"-0.01739502\", \"-0.767395\", \"-0.796875\", \"1.234375\", \"-0.109375\"], [\"-0.6213379\", \"-0.022521973\", \"-0.7810669\", \"-0.078125\", \"1.8125\", \"0.0\"], [\"-0.61621094\", \"-0.016662598\", \"-0.77008057\", \"-0.65625\", \"1.140625\", \"-0.0625\"], [\"-0.6291504\", \"-0.025939941\", \"-0.7871704\", \"-1.671875\", \"0.125\", \"0.015625\"], [\"-0.62060547\", \"-0.024230957\", \"-0.770813\", \"-1.40625\", \"0.34375\", \"0.03125\"], [\"-0.6176758\", \"-0.02154541\", \"-0.77178955\", \"-0.375\", \"-0.390625\", \"-0.1875\"], [\"-0.61938477\", \"-0.02545166\", \"-0.7896118\", \"-0.609375\", \"-1.328125\", \"0.046875\"], [\"-0.6135254\", \"-0.027160645\", \"-0.7781372\", \"-0.3125\", \"-0.765625\", \"-0.03125\"], [\"-0.62646484\", \"-0.023986816\", \"-0.8064575\", \"-0.640625\", \"-0.28125\", \"-0.109375\"], [\"-0.61621094\", \"-0.0335083\", \"-0.7896118\", \"-0.21875\", \"0.765625\", \"-0.53125\"], [\"-0.6086426\", \"-0.023498535\", \"-0.7962036\", \"-0.546875\", \"0.21875\", \"-0.359375\"], [\"-0.6062012\", \"-0.023498535\", \"-0.7815552\", \"-0.296875\", \"0.4375\", \"0.09375\"], [\"-0.611084\", \"-0.022033691\", \"-0.7752075\", \"0.109375\", \"1.28125\", \"0.046875\"], [\"-0.6052246\", \"-0.031555176\", \"-0.7839966\", \"-0.234375\", \"0.890625\", \"0.359375\"], [\"-0.6081543\", \"-0.026672363\", \"-0.7774048\", \"-0.3125\", \"1.015625\", \"0.3125\"], [\"-0.62109375\", \"-0.02545166\", \"-0.7888794\", \"-0.296875\", \"0.46875\", \"0.390625\"], [\"-0.6135254\", \"-0.020812988\", \"-0.8008423\", \"0.328125\", \"0.703125\", \"0.03125\"], [\"-0.6101074\", \"-0.023254395\", \"-0.7937622\", \"0.0\", \"0.34375\", \"0.40625\"], [\"-0.60253906\", \"-0.023498535\", \"-0.7737427\", \"0.78125\", \"-0.015625\", \"0.109375\"], [\"-0.6052246\", \"-0.019348145\", \"-0.7752075\", \"-0.390625\", \"0.671875\", \"0.25\"], [\"-0.609375\", \"-0.009094238\", \"-0.7905884\", \"-0.046875\", \"1.375\", \"0.359375\"], [\"-0.61987305\", \"-0.024719238\", \"-0.7966919\", \"-1.234375\", \"1.828125\", \"0.3125\"], [\"-0.61376953\", \"-0.024719238\", \"-0.7866821\", \"-0.171875\", \"1.625\", \"0.265625\"], [\"-0.62109375\", \"-0.02935791\", \"-0.78326416\", \"-0.59375\", \"0.96875\", \"0.125\"], [\"-0.6088867\", \"-0.02178955\", \"-0.79693604\", \"0.09375\", \"0.734375\", \"0.171875\"], [\"-0.607666\", \"-0.025939941\", \"-0.7769165\", \"-0.328125\", \"1.09375\", \"0.421875\"], [\"-0.61083984\", \"-0.016174316\", \"-0.78692627\", \"0.0625\", \"0.703125\", \"0.375\"], [\"-0.6142578\", \"-0.02130127\", \"-0.7937622\", \"0.015625\", \"0.734375\", \"0.3125\"], [\"-0.61206055\", \"-0.02545166\", \"-0.7920532\", \"0.34375\", \"0.765625\", \"0.171875\"], [\"-0.60668945\", \"-0.020812988\", \"-0.786438\", \"-0.25\", \"1.015625\", \"0.1875\"], [\"-0.6098633\", \"-0.027404785\", \"-0.784729\", \"-0.609375\", \"1.125\", \"0.265625\"], [\"-0.6113281\", \"-0.024719238\", \"-0.78985596\", \"-0.453125\", \"0.90625\", \"0.09375\"], [\"-0.61621094\", \"-0.027648926\", \"-0.79644775\", \"-1.21875\", \"1.265625\", \"0.40625\"], [\"-0.6027832\", \"-0.0154418945\", \"-0.79229736\", \"0.21875\", \"0.796875\", \"0.15625\"], [\"-0.6140137\", \"-0.026428223\", \"-0.77716064\", \"-0.546875\", \"1.203125\", \"0.203125\"], [\"-0.6142578\", \"-0.030822754\", \"-0.79107666\", \"0.0625\", \"1.046875\", \"0.28125\"], [\"-0.6154785\", \"-0.02935791\", \"-0.7918091\", \"-0.265625\", \"0.859375\", \"0.265625\"], [\"-0.6184082\", \"-0.024230957\", \"-0.78570557\", \"0.078125\", \"0.6875\", \"0.265625\"], [\"-0.60791016\", \"-0.023498535\", \"-0.7925415\", \"0.078125\", \"0.21875\", \"0.359375\"], [\"-0.60302734\", \"-0.018615723\", \"-0.7866821\", \"0.140625\", \"0.65625\", \"0.28125\"], [\"-0.6047363\", \"-0.024475098\", \"-0.7854614\", \"-0.375\", \"0.96875\", \"0.34375\"], [\"-0.611084\", \"-0.018371582\", \"-0.78570557\", \"-0.03125\", \"1.375\", \"0.34375\"], [\"-0.6152344\", \"-0.022277832\", \"-0.7876587\", \"-0.234375\", \"1.40625\", \"0.21875\"], [\"-0.61816406\", \"-0.027404785\", \"-0.7937622\", \"-0.21875\", \"1.28125\", \"0.125\"], [\"-0.61499023\", \"-0.022766113\", \"-0.79400635\", \"-0.140625\", \"1.140625\", \"0.125\"], [\"-0.61621094\", \"-0.027893066\", \"-0.78131104\", \"-0.015625\", \"1.03125\", \"0.21875\"], [\"-0.6057129\", \"-0.032043457\", \"-0.767395\", \"0.640625\", \"1.0625\", \"0.078125\"]]";

        String responseBody = null;
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            // Define the API endpoint URL
            String apiUrl = "http://iestynmullinor.pythonanywhere.com/predict";

            // Create an HTTP POST request
            HttpPost httpPost = new HttpPost(apiUrl);

            // Set the "Content-Type" header to "application/json"
            httpPost.setHeader("Content-Type", "application/json");

            // Set the request entity with the JSON data
            StringEntity entity = new StringEntity(json_payload);
            httpPost.setEntity(entity);

            // Execute the POST request
            HttpResponse response = httpClient.execute(httpPost);

            // Get the response entity
            HttpEntity responseEntity = response.getEntity();

            // Check if the request was successful (usually, HTTP status code 200 indicates success)
            if (response.getStatusLine().getStatusCode() == 200) {
                // Read and handle the response data
                responseBody = EntityUtils.toString(responseEntity);
                System.out.println("Request successful. Response data: " + responseBody);
            } else {
                System.out.println("Request failed. Response code: " + response.getStatusLine().getStatusCode());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return responseBody;
    }

}
